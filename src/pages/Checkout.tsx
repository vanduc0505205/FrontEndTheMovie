import React, { useState } from "react";
import { useLocation, useNavigate, useParams } from "react-router-dom";
import axios from "axios";
import { useQuery } from "@tanstack/react-query";
import { getMovieById } from "@/api/movie.api";
import { Spin, message } from "antd";

export default function Checkout() {
  const location = useLocation();
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);
  const bookingData = location.state;
  const { id: movieId } = useParams();
  
  const {
    data: movies,
    isLoading: isMovieLoading,
    error: movieError,
  } = useQuery({
    queryKey: ["movie", movieId],
    queryFn: () => getMovieById(movieId!),
    enabled: !!movieId,
  });

  if (!bookingData) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-gray-50 to-gray-200 flex items-center justify-center py-8">
        <div className="max-w-md w-full mx-4 bg-white rounded-2xl shadow-xl p-8 text-center transform transition-all duration-300">
          <h2 className="text-2xl font-bold text-red-600 mb-4">L·ªói: Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫∑t v√©</h2>
          <p className="text-gray-600 mb-6">C√≥ v·∫ª nh∆∞ th√¥ng tin ƒë·∫∑t v√© c·ªßa b·∫°n kh√¥ng ƒë∆∞·ª£c t·∫£i ƒë√∫ng. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c quay v·ªÅ trang ch√≠nh.</p>
          <div className="flex flex-col sm:flex-row justify-center gap-4">
            <button
              onClick={() => navigate("/")}
              className="bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors duration-200"
            >
              V·ªÅ trang ch√≠nh
            </button>
            <button
              onClick={() => window.location.reload()}
              className="bg-gray-500 text-white px-6 py-3 rounded-lg font-semibold hover:bg-gray-600 transition-colors duration-200"
            >
              Th·ª≠ l·∫°i
            </button>
          </div>
        </div>
      </div>
    );
  }

  const { userId, showtimeId, seatList, totalPrice, movie } = bookingData;

  const handlePayment = async (method: "vnpay" | "cash") => {
    if (method === "vnpay") {
      message.warning('T√≠nh nƒÉng thanh to√°n VNPay ƒëang ƒë∆∞·ª£c b·∫£o tr√¨. Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n kh√°c.');
      return;
    }

    setIsLoading(true);
    try {
      // Validate d·ªØ li·ªáu
      if (!userId || !showtimeId || !seatList?.length) {
        throw new Error("Thi·∫øu th√¥ng tin ƒë·∫∑t v√©. Vui l√≤ng th·ª≠ l·∫°i.");
      }

      // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i ƒëi
      const bookingData = {
        userId,
        showtimeId,
        seatList: seatList.map(seat => ({
          seatId: seat.seatId,
          seatType: seat.seatType.toLowerCase(),
          seatCode: seat.seatCode
        })),
        paymentMethod: method,
      };

      console.log('D·ªØ li·ªáu g·ª≠i ƒëi:', JSON.stringify(bookingData, null, 2));

      // G·ªçi API ƒë·∫∑t v√©
      const res = await axios.post(
        "http://localhost:3000/booking/book",
        bookingData,
        {
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
          }
        }
      );

      console.log('Ph·∫£n h·ªìi t·ª´ server:', {
        status: res.status,
        data: res.data,
        headers: res.headers
      });

      // X·ª≠ l√Ω k·∫øt qu·∫£ ƒë·∫∑t v√© th√†nh c√¥ng
      message.success({
        content: (
          <div>
            <div className="font-bold text-lg mb-2">ƒê·∫∑t v√© th√†nh c√¥ng!</div>
            <div className="text-gray-700">
              <p>M√£ ƒë∆°n h√†ng: <span className="font-medium">{res.data.booking?._id}</span></p>
              <p>T·ªïng ti·ªÅn: <span className="font-medium">{res.data.booking?.totalPrice?.toLocaleString()} VNƒê</span></p>
              <p className="mt-2">Vui l√≤ng ƒë·∫øn qu·∫ßy v√© thanh to√°n tr∆∞·ªõc 15 ph√∫t khi ƒë·∫øn xem phim.</p>
            </div>
          </div>
        ),
        duration: 8,
      });
      
      // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang l·ªãch s·ª≠ ƒë·∫∑t v√© sau 3 gi√¢y
      setTimeout(() => {
        navigate("/tickets");
      }, 3000);  
    } catch (error: any) {
      console.error("L·ªói thanh to√°n:", error);
      
      let errorMessage = "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω thanh to√°n";
      let errorDetails = "";
      
      if (error.response) {
        // L·ªói t·ª´ server
        console.error('Chi ti·∫øt l·ªói t·ª´ server:', {
          status: error.response.status,
          data: error.response.data,
          headers: error.response.headers
        });
        
        errorMessage = error.response.data?.message || `L·ªói t·ª´ server (${error.response.status})`;
        
        // Th√™m th√¥ng tin chi ti·∫øt l·ªói n·∫øu c√≥
        if (error.response.data?.error) {
          errorDetails = `Chi ti·∫øt: ${JSON.stringify(error.response.data.error, null, 2)}`;
        } else if (error.response.data) {
          errorDetails = `Ph·∫£n h·ªìi: ${JSON.stringify(error.response.data, null, 2)}`;
        }
      } else if (error.request) {
        // Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server
        console.error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server:', error.request);
        errorMessage = "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra:";
        errorDetails = "1. ƒê·∫£m b·∫£o backend ƒëang ch·∫°y\n2. Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng\n3. Th·ª≠ l·∫°i sau √≠t ph√∫t";
      } else {
        // L·ªói khi thi·∫øt l·∫≠p request
        console.error('L·ªói khi thi·∫øt l·∫≠p y√™u c·∫ßu:', error.message);
        errorMessage = `L·ªói: ${error.message}`;
      }
      
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói chi ti·∫øt
      message.error({
        content: (
          <div>
            <div className="font-bold">{errorMessage}</div>
            {errorDetails && <pre className="mt-2 text-xs text-gray-600 whitespace-pre-wrap">{errorDetails}</pre>}
          </div>
        ),
        duration: 5,
      });
    } finally {
      setIsLoading(false);
    }
  };

  if (isMovieLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Spin size="large" />
      </div>
    );
  }

  if (movieError) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-red-500">ƒê√£ x·∫£y ra l·ªói khi t·∫£i th√¥ng tin phim</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-gray-200 flex items-center justify-center py-8 px-4">
      <div className="max-w-3xl w-full bg-white rounded-2xl shadow-xl overflow-hidden">
        <div className="bg-blue-600 text-white p-6 text-center">
          <h1 className="text-2xl font-bold">X√ÅC NH·∫¨N THANH TO√ÅN</h1>
          <p className="text-blue-100 mt-2">Vui l√≤ng ki·ªÉm tra k·ªπ th√¥ng tin ƒë·∫∑t v√©</p>
        </div>

        <div className="p-6">
          {movies && (
            <div className="flex flex-col md:flex-row gap-6 mb-8 p-4 bg-gray-50 rounded-lg">
              <div className="w-full md:w-48 h-64 md:h-40 bg-gray-200 rounded-lg overflow-hidden flex-shrink-0">
                {movies.poster ? (
                  <img
                    src={movies.poster}
                    alt={movies.title}
                    className="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                  />
                ) : (
                  <div className="w-full h-full flex items-center justify-center text-gray-500">
                    Kh√¥ng c√≥ poster
                  </div>
                )}
              </div>
              <div className="flex-1">
                <h2 className="text-xl font-bold text-gray-800 mb-2">{movies.title}</h2>
                <div className="space-y-1 text-gray-600">
                  <p>‚è± Th·ªùi l∆∞·ª£ng: {movies.duration} ph√∫t</p>
                  <p>üé¨ ƒê·∫°o di·ªÖn: {movies.director || "ƒêang c·∫≠p nh·∫≠t"}</p>
                  <p>üîû ƒê·ªô tu·ªïi: {movies.ageRating || "P - Phim d√†nh cho m·ªçi l·ª©a tu·ªïi"}</p>
                </div>
              </div>
            </div>
          )}

          <div className="mb-8 bg-gray-50 p-4 rounded-lg">
            <h3 className="text-lg font-semibold text-gray-800 mb-3">Th√¥ng tin ƒë·∫∑t v√©</h3>
            
            <div className="mb-4">
              <h4 className="font-medium text-gray-700 mb-2">Gh·∫ø ƒë√£ ch·ªçn:</h4>
              <div className="flex flex-wrap gap-2">
                {seatList.map((seat: { seatId: string; seatCode: string; seatType: string }) => (
                  <div 
                    key={seat.seatId} 
                    className={`px-3 py-1 rounded-full text-sm font-medium ${
                      seat.seatType === "VIP" 
                        ? "bg-yellow-100 text-yellow-800" 
                        : "bg-blue-100 text-blue-800"
                    }`}
                  >
                    {seat.seatCode} ({seat.seatType})
                  </div>
                ))}
              </div>
            </div>

            <div className="flex justify-between items-center pt-4 border-t border-gray-200">
              <span className="text-lg font-semibold text-gray-700">T·ªïng ti·ªÅn:</span>
              <span className="text-2xl font-bold text-blue-600">
                {totalPrice?.toLocaleString()} VNƒê
              </span>
            </div>
          </div>

          <div className="flex flex-col sm:flex-row justify-between gap-4 mt-8">
            <button
              onClick={() => navigate(-1)}
              disabled={isLoading}
              className="px-6 py-3 bg-gray-200 text-gray-800 font-medium rounded-lg hover:bg-gray-300 transition-colors disabled:opacity-50"
            >
              Quay l·∫°i
            </button>
            
            <div className="flex flex-col gap-4 mt-6">
              <div className="relative">
                <div className="absolute inset-0 bg-gray-100 bg-opacity-80 rounded-lg flex items-center justify-center z-10">
                  <span className="bg-yellow-500 text-white text-xs font-bold px-2 py-1 rounded">S·∫Øp ra m·∫Øt</span>
                </div>
                <button
                  disabled={true}
                  className="w-full flex items-center justify-center gap-2 bg-gray-200 text-gray-500 py-3 px-6 rounded-lg font-semibold cursor-not-allowed opacity-70"
                >
                  <img src="https://sandbox.vnpayment.vn/merchant_website/assets/img/logo/logo-vnpay.svg" alt="VNPay" className="h-6 grayscale" />
                  Thanh to√°n VNPay (ƒêang b·∫£o tr√¨)
                </button>
              </div>

              <button
                onClick={() => handlePayment("cash")}
                disabled={isLoading}
                className="flex items-center justify-center gap-2 bg-blue-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isLoading ? (
                  <>
                    <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    ƒêang x·ª≠ l√Ω...
                  </>
                ) : (
                  <>
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                    </svg>
                    Thanh to√°n ti·ªÅn m·∫∑t
                  </>
                )}
              </button>
              
              <div className="bg-gray-50 p-4 text-center text-sm text-gray-500 border-t border-gray-200">
                <p>Vui l√≤ng ki·ªÉm tra k·ªπ th√¥ng tin tr∆∞·ªõc khi thanh to√°n</p>
                <p className="mt-1">M·ªçi th·∫Øc m·∫Øc vui l√≤ng li√™n h·ªá hotline: 1900 1234</p>
              </div>
            </div>
          </div>
        </div>
        
        <div className="bg-gray-50 p-4 text-center text-sm text-gray-500 border-t border-gray-200">
          <p>Vui l√≤ng ki·ªÉm tra k·ªπ th√¥ng tin tr∆∞·ªõc khi thanh to√°n</p>
          <p className="mt-1">M·ªçi th·∫Øc m·∫Øc vui l√≤ng li√™n h·ªá hotline: 1900 1234</p>
        </div>
      </div>
    </div>
  );
}